###############
##  INPUTS  ##
###############

############### DEFAULTS ###############

# set random seed in the initialize calls

	setSeed(1234567890);

# one pop of a given size

	sim.addSubpop("p1", 1000);
	
# make other mating systems

	p1.setCloningRate(0.99);	// 99% asexual
	p1.setSelfingRate(0.99);	// 99% selfing

# make types of mutations

	initializeMutationType("m1", 0.5, "f", 0.0);  // additive, fixed effect, neutral
	initializeMutationType("m2", 0.25, "e", -0.01);  // dominance, exponential effect, deleterious with mean s as given
	initializeMutationType("m3", 0.25, "g", -0.01, 0.3);  // dominance, gamma effect, deleterious with mean s as given, and alpha shape 0.3
	initializeMutationType("m4", 0.25, "n", 0.01, 0.1);  // dominance, normal effect, beneficial with mean s as given, and standard deviation 0.1
	initializeMutationType("m5", 0.25, "w", 0.01, 0.2);  // dominance, Weibull effect, beneficial with lambda scale as 0.01, and k shape 0.2

# make genomic elements

	\\ which mutations occur in genomic element type 1 or 2, and for multiple, what relative proportion of the time is that mutation type drawn (i.e. doesn't have to sum to 1)
	initializeGenomicElementType("g1", c(m1,m3,m4,m5,m6,m7,m8,m9,m10,m11,m12,m13), c(0.25, 0.0675, 0.0825, 0.0225, 0.0225, 0.0225, 0.0225, 0.0225, 0.0225, 0.0225, 0.0225, 0.42 ));
	initializeGenomicElementType("g2", m2, 1.0);


############### CUSTOM ###############

# make a 100Mbp chromosome with every 200 bp coding exons and every 800 bp noncoding introns

	// one chromosome with coding elements (g1) over 200 bp then noncoding (g2) over 800 bp up to a total of 100Mbp in size
	for (index in 0:99999){
		initializeGenomicElement(g1, index*1000, index*1000 + 199);
		initializeGenomicElement(g2, index*1000 + 200, index*1000 + 999);
	}		
	initializeRecombinationRate(5e-8);

# ignore introns, still have 100Mbp genome

	// one chromosome with coding elements over 200 bp tand empty 800 bp intervening, up to a total of 100Mbp in size
	for (index in 0:99999){
		initializeGenomicElement(g1, index*1000, index*1000 + 199);
	}

# NB something goes wrong if you end at bp ...01 instead of bp ...99 not sure why, maybe because that gives it an extra spot to do more recombination at the end, but either way have changed input scripts to not have that option

###############
##  OUTPUTS  ##
###############

############### DEFAULTS ###############

# at a given generation (80,000), output 100 haploid individuals

	80000 late() { p1.outputSample(100); }

# at a given generation (80,000), output all mutations that have fixed and been removed from the pop, can also specify file

	80000 late() { sim.outputFixedMutations(); }
	10000 late() { sim.outputFixedMutations("FixedOutput_name_of_output.txt"); }

# at a given generation, output full state of the population, can also specify file

	10000 late() { sim.outputFull(); }
	10000 late() { sim.outputFull("name_of_output.txt"); }

# at a given generation sample x number of DIPLOID individuals

	10000 late() { 
		subsampDiploids = sim.subpopulations.individuals;
		sampledIndividuals = sample(subsampDiploids, 100);
		sampledIndividuals.genomes.output();
	}

############### CUSTOM ###############
